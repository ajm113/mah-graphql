package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/ajm113/mah-graphql/graph/model"
	modeldb "github.com/ajm113/mah-graphql/graph/model_db"
	"github.com/google/uuid"
	"github.com/rs/zerolog/log"
)

// CreateMovie is the resolver for the createMovie field.
func (r *mutationResolver) CreateMovie(ctx context.Context, input model.NewMovie) (*model.Movie, error) {
	movie := &modeldb.Movie{
		ID:    uuid.New(),
		Name:  input.Name,
		Image: input.Image,
	}

	_, err := r.DB.NewInsert().Model(movie).Exec(ctx)
	if err != nil {
		log.Error().Err(err).Msg("failed inserting movie")
		return nil, err
	}

	return movie.ToModel(), nil
}

// CreateMeme is the resolver for the createMeme field.
func (r *mutationResolver) CreateMeme(ctx context.Context, input model.NewMeme) (*model.Meme, error) {
	meme := &modeldb.Meme{
		ID:    uuid.New(),
		Image: input.Image,
	}

	if input.MovieID != nil {
		movieId, err := uuid.Parse(*input.MovieID)

		if err != nil {
			return nil, err
		}

		meme.MovieID = &movieId
	}

	_, err := r.DB.NewInsert().Model(meme).Exec(ctx)
	if err != nil {
		log.Error().Err(err).Msg("failed inserting meme")
		return nil, err
	}

	return meme.ToModel(), nil
}

// CreateQoute is the resolver for the createQoute field.
func (r *mutationResolver) CreateQoute(ctx context.Context, input model.NewQoute) (*model.Qoute, error) {
	movieId, err := uuid.Parse(input.MovieID)

	if err != nil {
		return nil, err
	}

	qoute := &modeldb.Qoute{
		ID:      uuid.New(),
		Text:    input.Text,
		MovieID: &movieId,
	}

	_, err = r.DB.NewInsert().Model(qoute).Exec(ctx)
	if err != nil {
		log.Error().Err(err).Msg("failed inserting qoute")
		return nil, err
	}

	return qoute.ToModel(), nil
}

// Movies is the resolver for the movies field.
func (r *queryResolver) Movies(ctx context.Context) (movies []*model.Movie, err error) {
	moviesdb := make([]*modeldb.Movie, 0)
	err = r.DB.NewSelect().Model(&moviesdb).Scan(ctx)

	if err != nil {
		log.Error().Err(err).Msg("failed fetching movies")
	}

	for _, m := range moviesdb {
		movies = append(movies, m.ToModel())
	}

	return
}

// Memes is the resolver for the memes field.
func (r *queryResolver) Memes(ctx context.Context) (memes []*model.Meme, err error) {
	memesdb := make([]*modeldb.Meme, 0)
	err = r.DB.NewSelect().Model(&memesdb).Scan(ctx)

	if err != nil {
		log.Error().Err(err).Msg("failed fetching memes")
	}

	for _, m := range memesdb {
		memes = append(memes, m.ToModel())
	}

	return
}

// Qoutes is the resolver for the qoutes field.
func (r *queryResolver) Qoutes(ctx context.Context) (qoutes []*model.Qoute, err error) {
	qoutesdb := make([]*modeldb.Qoute, 0)
	err = r.DB.NewSelect().Model(&qoutesdb).Scan(ctx)

	if err != nil {
		log.Error().Err(err).Msg("failed fetching qoutes")
	}

	for _, q := range qoutesdb {
		qoutes = append(qoutes, q.ToModel())
	}

	return
}

// Movie is the resolver for the movie field.
func (r *queryResolver) Movie(ctx context.Context, id string) (*model.Movie, error) {
	moviedb := &modeldb.Movie{}
	err := r.DB.NewSelect().Model(moviedb).Where("id = ?", id).Scan(ctx)

	if err != nil {
		log.Error().Err(err).Msg("failed fetching movie")
		return nil, err
	}

	return moviedb.ToModel(), nil
}

// Qoute is the resolver for the qoute field.
func (r *queryResolver) Qoute(ctx context.Context, id string) (*model.Qoute, error) {
	qoutedb := &modeldb.Qoute{}
	err := r.DB.NewSelect().Model(qoutedb).Where("id = ?", id).Scan(ctx)

	if err != nil {
		log.Error().Err(err).Msg("failed fetching qoute")
		return nil, err
	}

	return qoutedb.ToModel(), nil
}

// Meme is the resolver for the meme field.
func (r *queryResolver) Meme(ctx context.Context, id string) (*model.Meme, error) {
	memedb := &modeldb.Meme{}
	err := r.DB.NewSelect().Model(memedb).Where("id = ?", id).Scan(ctx)

	if err != nil {
		log.Error().Err(err).Msg("failed fetching meme")
		return nil, err
	}

	return memedb.ToModel(), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
